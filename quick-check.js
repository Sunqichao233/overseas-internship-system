const fs = require('fs');
const path = require('path');

// Êµ∑Â§ñÂÆû‰π†Â≠¶ÁîüÂêçÂçï
const studentList = [
    'ËñõËàíÊñá', 'ÈªÑÁéâÂ©∑', 'Âë®È®´È®´', 'ÊûóÈõ®Êô¥', 'ÁéãÁùøÊ∏Ö',
    'Êú±ÂÆ∂Á∑Ø', 'Ëî°ÂßøÁ©é', 'ËåÖÊáã', 'ÈôàÊõ¶', 'ÂæêËã•ÁÜí',
    'ËÆ∏Â¶ÇÊ∏Ö', 'ÂæêÊ∑ëÊΩî', 'Êú±Ê≤ÖÁèä', 'Ê¥™‰Ω≥ÈÄ∏', 'Â≠üÊ•®ÁíΩ',
    'ÈáëÊó≠Ê≤¢', 'ÂàòÊµ©ÁÑ∂', 'ÈôàÁ¥´ÂΩ§', 'ÂîêÈüªËåú', 'ÁéãÈõ®Ê°ê',
    'Âàò‰Ω≥Ëâ≥', 'ÂÆâ‰π¶ÈõØ', 'ÂßöÂ•ïÊô®'
];

// ÁÆÄÂåñÁöÑÂêçÂ≠óÂåπÈÖçÔºàÂ§ÑÁêÜÁπÅÁÆÄ‰ΩìÂ∑ÆÂºÇÔºâ
function normalizeNames(names) {
    return names.map(name => {
        return name
            .replace(/Âäâ/g, 'Âàò')
            .replace(/Èô≥/g, 'Èôà')
            .replace(/È®´/g, 'È™û')
            .replace(/ÁÜí/g, 'Ëçß')
            .replace(/ÊΩî/g, 'Ê¥Å')
            .replace(/Á©é/g, 'È¢ñ')
            .replace(/Á∑Ø/g, 'Á∫¨')
            .replace(/Ê•®ÁíΩ/g, 'Á•ØÁé∫')
            .replace(/Ê≤¢/g, 'Ê≥Ω')
            .replace(/Èüª/g, 'Èüµ')
            .replace(/Ë®±/g, 'ËÆ∏')
            .replace(/Êõ∏/g, '‰π¶');
    });
}

function quickCheck() {
    const uploadsDir = path.join(__dirname, 'public', 'uploads');
    
    console.log('üìä Âø´ÈÄüÁªüËÆ°ÁªìÊûú');
    console.log('==================');
    
    try {
        if (!fs.existsSync(uploadsDir)) {
            console.log('‚ùå uploadsÁõÆÂΩï‰∏çÂ≠òÂú®');
            return;
        }
        
        const files = fs.readdirSync(uploadsDir);
        const uploadedFiles = files.filter(file => file !== '.gitkeep');
        
        if (uploadedFiles.length === 0) {
            console.log('üìÅ ÊöÇÊó†‰Ωú‰∏öÊèê‰∫§');
            return;
        }
        
        // ÊèêÂèñÂßìÂêç
        const submittedNames = uploadedFiles.map(file => {
            const match = file.match(/^(.+?)_\d+\./);
            return match ? match[1] : file;
        });
        
        // Ê†áÂáÜÂåñÂêçÂ≠ó
        const normalizedSubmitted = normalizeNames(submittedNames);
        const normalizedStudentList = normalizeNames(studentList);
        
        // ÁªüËÆ°
        const validSubmissions = [];
        const invalidSubmissions = [];
        const notSubmitted = [];
        
        // Ê£ÄÊü•ÊúâÊïàÊèê‰∫§
        normalizedSubmitted.forEach((name, index) => {
            if (normalizedStudentList.includes(name)) {
                const originalName = submittedNames[index];
                if (!validSubmissions.includes(originalName)) {
                    validSubmissions.push(originalName);
                }
            } else {
                const originalName = submittedNames[index];
                if (!invalidSubmissions.includes(originalName)) {
                    invalidSubmissions.push(originalName);
                }
            }
        });
        
        // Ê£ÄÊü•Êú™Êèê‰∫§
        normalizedStudentList.forEach((normalizedName, index) => {
            if (!normalizedSubmitted.includes(normalizedName)) {
                notSubmitted.push(studentList[index]);
            }
        });
        
        // ËæìÂá∫ÁªìÊûú
        console.log(`üìÑ ÊÄªÊñá‰ª∂Êï∞: ${uploadedFiles.length}`);
        console.log(`‚úÖ Â∑≤Êèê‰∫§: ${validSubmissions.length}‰∫∫`);
        console.log(`‚ùå Êú™Êèê‰∫§: ${notSubmitted.length}‰∫∫`);
        console.log(`‚ö†Ô∏è  ‰∏çÂú®ÂêçÂçï: ${invalidSubmissions.length}‰∫∫`);
        
        const submissionRate = ((validSubmissions.length / studentList.length) * 100).toFixed(1);
        console.log(`üìà Êèê‰∫§Áéá: ${submissionRate}%`);
        
        if (notSubmitted.length > 0) {
            console.log('\n‚ùå Êú™Êèê‰∫§‰Ωú‰∏öÁöÑÂ≠¶Áîü:');
            notSubmitted.forEach(name => console.log(`   ‚Ä¢ ${name}`));
        }
        
        if (invalidSubmissions.length > 0) {
            console.log('\n‚ö†Ô∏è  ‰∏çÂú®ÂêçÂçï‰∏≠ÁöÑÊèê‰∫§ËÄÖ:');
            invalidSubmissions.forEach(name => console.log(`   ‚Ä¢ ${name}`));
        }
        
    } catch (error) {
        console.error('‚ùå Ê£ÄÊü•Â§±Ë¥•:', error.message);
    }
}

quickCheck();
